{"ast":null,"code":"import React,{createContext,useContext,useEffect,useState}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext();export const useAuth=()=>{const context=useContext(AuthContext);if(!context){throw new Error('useAuth must be used within an AuthProvider');}return context;};export const AuthProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(null);const[token,setToken]=useState(null);const[loading,setLoading]=useState(true);const[advisorData,setAdvisorData]=useState(null);useEffect(()=>{const initializeAuth=async()=>{try{// First, check if we're running in Cloud Run by testing the metadata server\nconst isCloudRun=await checkCloudRunEnvironment();if(isCloudRun){// Get service account identity token for the backend\nconst backendUrl=process.env.REACT_APP_API_URL||'https://apialchemistproject-backend-608187465720.us-central1.run.app';const identityToken=await getServiceAccountToken(backendUrl);if(identityToken){setToken(identityToken);setUser({authenticated:true,serviceAccount:true});console.log('Service account authentication successful');}else{throw new Error('Failed to get service account token');}}else{// Local development - use stored token or require sign in\nconst savedToken=localStorage.getItem('gcp_token');if(savedToken){setToken(savedToken);setUser({authenticated:true,serviceAccount:false});}// If no saved token, user will need to sign in manually\n}}catch(error){console.log('Service account auth not available:',error.message);// Fall back to checking for saved user token\nconst savedToken=localStorage.getItem('gcp_token');if(savedToken){setToken(savedToken);setUser({authenticated:true,serviceAccount:false});}}finally{setLoading(false);}};initializeAuth();},[]);const checkCloudRunEnvironment=async()=>{try{const response=await fetch('http://metadata.google.internal/computeMetadata/v1/instance/id',{headers:{'Metadata-Flavor':'Google'},timeout:1000});return response.ok;}catch(error){return false;}};const getServiceAccountToken=async audience=>{try{const response=await fetch(`http://metadata.google.internal/computeMetadata/v1/instance/service-accounts/default/identity?audience=${encodeURIComponent(audience)}`,{headers:{'Metadata-Flavor':'Google'}});if(response.ok){return await response.text();}else{throw new Error(`Failed to get token: ${response.status}`);}}catch(error){console.error('Error getting service account token:',error);return null;}};// Function to fetch advisor data by email from BigQuery\nconst fetchAdvisorByEmail=async email=>{try{const apiUrl=process.env.REACT_APP_API_URL||'https://apialchemistproject-backend-608187465720.us-central1.run.app';console.log('Fetching advisor for email:',email,'from API:',apiUrl);const response=await fetch(`${apiUrl}/advisor-by-email`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({email:email})});if(response.ok){const result=await response.json();if(result.advisor){console.log('‚úÖ Found advisor in database:',result.advisor);setAdvisorData(result.advisor);localStorage.setItem('advisor_data',JSON.stringify(result.advisor));return result.advisor;}else{throw new Error('Advisor not found in database response');}}else{console.error('API Error:',response.status,response.statusText);throw new Error(`API Error: ${response.status}`);}}catch(error){console.error('‚ùå Error fetching advisor data for email:',email,error);// Default to advisor ADV001 (first advisor) from the database\ntry{console.log('üîÑ Attempting to fetch default advisor (ADV001)...');const apiUrl=process.env.REACT_APP_API_URL||'https://apialchemistproject-backend-608187465720.us-central1.run.app';const defaultResponse=await fetch(`${apiUrl}/advisor-by-id`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({advisor_id:\"ADV001\"})});if(defaultResponse.ok){const defaultResult=await defaultResponse.json();if(defaultResult.advisor){console.log('‚úÖ Using default advisor ID 1:',defaultResult.advisor);setAdvisorData(defaultResult.advisor);localStorage.setItem('advisor_data',JSON.stringify(defaultResult.advisor));return defaultResult.advisor;}}else{console.error('Default advisor API Error:',defaultResponse.status);}}catch(defaultError){console.error('‚ùå Error fetching default advisor:',defaultError);}// Final fallback if database calls fail\nconst fallbackAdvisor={advisor_id:'ADV001',name:'Default Banking Advisor',email:'default@privatebank.com',specialization:'Private Banking',years_experience:5,location:'New York',isDefault:true,isFallback:true};console.log('‚ö†Ô∏è  Using hardcoded fallback advisor:',fallbackAdvisor);setAdvisorData(fallbackAdvisor);localStorage.setItem('advisor_data',JSON.stringify(fallbackAdvisor));return fallbackAdvisor;}};// Enhanced sign-in with Google OAuth to capture email\nconst signInWithGoogle=()=>{return new Promise((resolve,reject)=>{// COMPREHENSIVE EXCEPTION HANDLING: Multiple fallback layers\ntry{// Temporary demo bypass for OAuth domain issues\nif(window.location.hostname.includes('run.app')){console.log('üîÑ Demo mode: Bypassing OAuth for Cloud Run deployment');handleDemoAuthentication(resolve);return;}// Original Google OAuth implementation for local development\nhandleGoogleOAuth(resolve,reject);}catch(globalError){console.error('‚ùå CRITICAL: Global authentication error:',globalError);handleFallbackAuthentication(resolve,'Global error occurred');}});};// Demo authentication handler with fallbacks\nconst handleDemoAuthentication=resolve=>{try{const demoUserEmail='sarah.johnson@privatebank.com';const demoUser={email:demoUserEmail,name:'Sarah Johnson',credential:'demo_token_'+Date.now()};localStorage.setItem('gcp_token',demoUser.credential);localStorage.setItem('user_email',demoUser.email);localStorage.setItem('user_name',demoUser.name);setToken(demoUser.credential);setUser({authenticated:true,email:demoUser.email,name:demoUser.name,serviceAccount:false});// Fetch real advisor data from database based on email\nfetchAdvisorByEmail(demoUserEmail).then(advisor=>{console.log('‚úÖ Demo authentication successful with advisor:',advisor===null||advisor===void 0?void 0:advisor.name);resolve({email:demoUser.email,name:demoUser.name,advisor:advisor});}).catch(error=>{console.error('‚ö†Ô∏è  Demo advisor fetch failed, using fallback:',error);handleFallbackAuthentication(resolve,'Demo advisor fetch failed');});}catch(demoError){console.error('‚ùå Demo authentication failed:',demoError);handleFallbackAuthentication(resolve,'Demo authentication failed');}};// Google OAuth handler with comprehensive error handling\nconst handleGoogleOAuth=(resolve,reject)=>{try{// Set a timeout to fallback if Google OAuth doesn't respond\nconst oauthTimeout=setTimeout(()=>{console.warn('‚è∞ Google OAuth timeout - falling back to default authentication');handleFallbackAuthentication(resolve,'OAuth timeout');},10000);// 10 second timeout\nif(!window.google){// Load Google Identity Services\nconst script=document.createElement('script');script.src='https://accounts.google.com/gsi/client';script.onload=()=>{clearTimeout(oauthTimeout);initializeGoogleAuth(resolve,reject);};script.onerror=()=>{clearTimeout(oauthTimeout);console.error('‚ùå Failed to load Google Identity Services script');handleFallbackAuthentication(resolve,'Google script load failed');};document.head.appendChild(script);}else{clearTimeout(oauthTimeout);initializeGoogleAuth(resolve,reject);}}catch(oauthError){console.error('‚ùå Google OAuth setup error:',oauthError);handleFallbackAuthentication(resolve,'OAuth setup error');}};// Initialize Google Auth with error handling\nconst initializeGoogleAuth=(resolve,reject)=>{try{window.google.accounts.id.initialize({client_id:'869426294559-2hqgspvo8nqm0h2c8rq1qfn7htvrkfnm.apps.googleusercontent.com',callback:async response=>{try{console.log('üîÑ Processing Google authentication response...');// Decode JWT to get user info\nconst payload=JSON.parse(atob(response.credential.split('.')[1]));const userEmail=payload.email;const userName=payload.name;// Store user token and email\nlocalStorage.setItem('gcp_token',response.credential);localStorage.setItem('user_email',userEmail);localStorage.setItem('user_name',userName);setToken(response.credential);setUser({authenticated:true,email:userEmail,name:userName,serviceAccount:false});// Fetch advisor data from BigQuery based on email\ntry{const advisor=await fetchAdvisorByEmail(userEmail);console.log('‚úÖ Google authentication successful with advisor:',advisor===null||advisor===void 0?void 0:advisor.name);resolve({email:userEmail,name:userName,advisor:advisor});}catch(advisorError){console.error('‚ö†Ô∏è  Advisor fetch failed after Google auth, using fallback:',advisorError);// Still resolve with user data, advisor will be fallback\nresolve({email:userEmail,name:userName,advisor:null});}}catch(callbackError){console.error('‚ùå Error processing Google sign-in callback:',callbackError);handleFallbackAuthentication(resolve,'Google callback processing failed');}},error_callback:error=>{console.error('‚ùå Google OAuth error callback:',error);handleFallbackAuthentication(resolve,`Google OAuth error: ${(error===null||error===void 0?void 0:error.type)||'unknown'}`);},auto_select:false});// Try to show the prompt, with fallback if it fails\ntry{window.google.accounts.id.prompt(notification=>{console.log('Google OAuth prompt notification:',notification);if(notification.isNotDisplayed()||notification.isSkippedMoment()){// Show the One Tap UI manually\ntry{const buttonElement=document.getElementById('google-signin-button');if(buttonElement){window.google.accounts.id.renderButton(buttonElement,{type:'standard',size:'large',text:'signin_with',theme:'outline',logo_alignment:'left'});console.log('‚úÖ Google sign-in button rendered successfully');}else{console.warn('‚ö†Ô∏è  Google sign-in button element not found');}}catch(renderError){console.error('‚ùå Error rendering Google sign-in button:',renderError);}}});}catch(promptError){console.error('‚ùå Error showing Google OAuth prompt:',promptError);handleFallbackAuthentication(resolve,'Google prompt failed');}}catch(initError){console.error('‚ùå Error initializing Google OAuth:',initError);handleFallbackAuthentication(resolve,'Google OAuth initialization failed');}};// Ultimate fallback authentication - always succeeds\nconst handleFallbackAuthentication=async(resolve,reason)=>{console.log('üõ°Ô∏è  FALLBACK AUTHENTICATION ACTIVATED - Reason:',reason);try{const fallbackUser={email:'fallback@privatebank.com',name:'Default Banking Advisor',credential:'fallback_token_'+Date.now()};localStorage.setItem('gcp_token',fallbackUser.credential);localStorage.setItem('user_email',fallbackUser.email);localStorage.setItem('user_name',fallbackUser.name);setToken(fallbackUser.credential);setUser({authenticated:true,email:fallbackUser.email,name:fallbackUser.name,serviceAccount:false,isFallback:true});// **FIRST TRY: Fetch advisor ADV001 from database**\ntry{console.log('üîÑ FALLBACK: Attempting to fetch advisor ADV001 from database...');const apiUrl=process.env.REACT_APP_API_URL||'https://apialchemistproject-backend-608187465720.us-central1.run.app';const response=await fetch(`${apiUrl}/advisor-by-id`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({advisor_id:\"ADV001\"})});if(response.ok){const result=await response.json();if(result.advisor){console.log('‚úÖ FALLBACK SUCCESS: Using advisor ADV001 from database:',result.advisor);setAdvisorData(result.advisor);localStorage.setItem('advisor_data',JSON.stringify(result.advisor));resolve({email:fallbackUser.email,name:fallbackUser.name,advisor:result.advisor,isFallback:true,fallbackReason:reason,advisorSource:'Database advisor ADV001'});return;}}console.warn('‚ö†Ô∏è  Could not fetch advisor ID 1 from database, using hardcoded fallback');}catch(dbError){console.warn('‚ö†Ô∏è  Database unavailable for advisor ID 1, using hardcoded fallback:',dbError);}// **SECOND TRY: Use hardcoded fallback advisor only if database fails**\nconst fallbackAdvisor={advisor_id:'ADV001',name:'Default Banking Advisor',email:'fallback@privatebank.com',specialization:'Private Banking',years_experience:5,location:'New York',isDefault:true,isFallback:true,isHardcoded:true};setAdvisorData(fallbackAdvisor);localStorage.setItem('advisor_data',JSON.stringify(fallbackAdvisor));console.log('‚úÖ HARDCODED FALLBACK SUCCESSFUL:',fallbackAdvisor.name);resolve({email:fallbackUser.email,name:fallbackUser.name,advisor:fallbackAdvisor,isFallback:true,fallbackReason:reason,advisorSource:'Hardcoded fallback'});}catch(fallbackError){console.error('‚ùå CRITICAL: Even fallback authentication failed!',fallbackError);// Last resort - minimal authentication\nresolve({email:'emergency@privatebank.com',name:'Emergency User',advisor:{advisor_id:'EMERGENCY',name:'Emergency Advisor',email:'emergency@privatebank.com',isEmergency:true},isEmergency:true,fallbackReason:'All authentication methods failed',advisorSource:'Emergency mode'});}};// Manual sign-in for development/testing\nconst signInWithToken=idToken=>{localStorage.setItem('gcp_token',idToken);setToken(idToken);setUser({authenticated:true,serviceAccount:false});};const signOut=()=>{localStorage.removeItem('gcp_token');localStorage.removeItem('user_email');localStorage.removeItem('user_name');localStorage.removeItem('advisor_data');setToken(null);setUser(null);setAdvisorData(null);};const getAuthHeaders=()=>{if(!token)return{'Content-Type':'application/json'};return{'Authorization':`Bearer ${token}`,'Content-Type':'application/json'};};// Initialize with saved data on load\nuseEffect(()=>{const savedAdvisor=localStorage.getItem('advisor_data');const savedEmail=localStorage.getItem('user_email');if(savedAdvisor){setAdvisorData(JSON.parse(savedAdvisor));}else if(savedEmail){// Re-fetch advisor data if we have email but no advisor data\nfetchAdvisorByEmail(savedEmail);}},[user]);const value={user,token,loading,advisorData,signInWithToken,signInWithGoogle,signOut,getAuthHeaders,fetchAdvisorByEmail,isAuthenticated:!!user};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});};","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","jsx","_jsx","AuthContext","useAuth","context","Error","AuthProvider","_ref","children","user","setUser","token","setToken","loading","setLoading","advisorData","setAdvisorData","initializeAuth","isCloudRun","checkCloudRunEnvironment","backendUrl","process","env","REACT_APP_API_URL","identityToken","getServiceAccountToken","authenticated","serviceAccount","console","log","savedToken","localStorage","getItem","error","message","response","fetch","headers","timeout","ok","audience","encodeURIComponent","text","status","fetchAdvisorByEmail","email","apiUrl","method","body","JSON","stringify","result","json","advisor","setItem","statusText","defaultResponse","advisor_id","defaultResult","defaultError","fallbackAdvisor","name","specialization","years_experience","location","isDefault","isFallback","signInWithGoogle","Promise","resolve","reject","window","hostname","includes","handleDemoAuthentication","handleGoogleOAuth","globalError","handleFallbackAuthentication","demoUserEmail","demoUser","credential","Date","now","then","catch","demoError","oauthTimeout","setTimeout","warn","google","script","document","createElement","src","onload","clearTimeout","initializeGoogleAuth","onerror","head","appendChild","oauthError","accounts","id","initialize","client_id","callback","payload","parse","atob","split","userEmail","userName","advisorError","callbackError","error_callback","type","auto_select","prompt","notification","isNotDisplayed","isSkippedMoment","buttonElement","getElementById","renderButton","size","theme","logo_alignment","renderError","promptError","initError","reason","fallbackUser","fallbackReason","advisorSource","dbError","isHardcoded","fallbackError","isEmergency","signInWithToken","idToken","signOut","removeItem","getAuthHeaders","savedAdvisor","savedEmail","value","isAuthenticated","Provider"],"sources":["/home/prakashb/Prakash/project_hackathon/frontend/src/AuthContextSimple.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [token, setToken] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [advisorData, setAdvisorData] = useState(null);\n\n  useEffect(() => {\n    const initializeAuth = async () => {\n      try {\n        // First, check if we're running in Cloud Run by testing the metadata server\n        const isCloudRun = await checkCloudRunEnvironment();\n        \n        if (isCloudRun) {\n          // Get service account identity token for the backend\n          const backendUrl = process.env.REACT_APP_API_URL || 'https://apialchemistproject-backend-608187465720.us-central1.run.app';\n          const identityToken = await getServiceAccountToken(backendUrl);\n          \n          if (identityToken) {\n            setToken(identityToken);\n            setUser({ authenticated: true, serviceAccount: true });\n            console.log('Service account authentication successful');\n          } else {\n            throw new Error('Failed to get service account token');\n          }\n        } else {\n          // Local development - use stored token or require sign in\n          const savedToken = localStorage.getItem('gcp_token');\n          if (savedToken) {\n            setToken(savedToken);\n            setUser({ authenticated: true, serviceAccount: false });\n          }\n          // If no saved token, user will need to sign in manually\n        }\n      } catch (error) {\n        console.log('Service account auth not available:', error.message);\n        // Fall back to checking for saved user token\n        const savedToken = localStorage.getItem('gcp_token');\n        if (savedToken) {\n          setToken(savedToken);\n          setUser({ authenticated: true, serviceAccount: false });\n        }\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    initializeAuth();\n  }, []);\n\n  const checkCloudRunEnvironment = async () => {\n    try {\n      const response = await fetch('http://metadata.google.internal/computeMetadata/v1/instance/id', {\n        headers: { 'Metadata-Flavor': 'Google' },\n        timeout: 1000\n      });\n      return response.ok;\n    } catch (error) {\n      return false;\n    }\n  };\n\n  const getServiceAccountToken = async (audience) => {\n    try {\n      const response = await fetch(\n        `http://metadata.google.internal/computeMetadata/v1/instance/service-accounts/default/identity?audience=${encodeURIComponent(audience)}`,\n        {\n          headers: { 'Metadata-Flavor': 'Google' }\n        }\n      );\n      \n      if (response.ok) {\n        return await response.text();\n      } else {\n        throw new Error(`Failed to get token: ${response.status}`);\n      }\n    } catch (error) {\n      console.error('Error getting service account token:', error);\n      return null;\n    }\n  };\n\n  // Function to fetch advisor data by email from BigQuery\n  const fetchAdvisorByEmail = async (email) => {\n    try {\n      const apiUrl = process.env.REACT_APP_API_URL || 'https://apialchemistproject-backend-608187465720.us-central1.run.app';\n      console.log('Fetching advisor for email:', email, 'from API:', apiUrl);\n      \n      const response = await fetch(`${apiUrl}/advisor-by-email`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ email: email })\n      });\n\n      if (response.ok) {\n        const result = await response.json();\n        if (result.advisor) {\n          console.log('‚úÖ Found advisor in database:', result.advisor);\n          setAdvisorData(result.advisor);\n          localStorage.setItem('advisor_data', JSON.stringify(result.advisor));\n          return result.advisor;\n        } else {\n          throw new Error('Advisor not found in database response');\n        }\n      } else {\n        console.error('API Error:', response.status, response.statusText);\n        throw new Error(`API Error: ${response.status}`);\n      }\n    } catch (error) {\n      console.error('‚ùå Error fetching advisor data for email:', email, error);\n      \n      // Default to advisor ADV001 (first advisor) from the database\n      try {\n        console.log('üîÑ Attempting to fetch default advisor (ADV001)...');\n        const apiUrl = process.env.REACT_APP_API_URL || 'https://apialchemistproject-backend-608187465720.us-central1.run.app';\n        \n        const defaultResponse = await fetch(`${apiUrl}/advisor-by-id`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ advisor_id: \"ADV001\" })\n        });\n\n        if (defaultResponse.ok) {\n          const defaultResult = await defaultResponse.json();\n          if (defaultResult.advisor) {\n            console.log('‚úÖ Using default advisor ID 1:', defaultResult.advisor);\n            setAdvisorData(defaultResult.advisor);\n            localStorage.setItem('advisor_data', JSON.stringify(defaultResult.advisor));\n            return defaultResult.advisor;\n          }\n        } else {\n          console.error('Default advisor API Error:', defaultResponse.status);\n        }\n      } catch (defaultError) {\n        console.error('‚ùå Error fetching default advisor:', defaultError);\n      }\n\n      // Final fallback if database calls fail\n      const fallbackAdvisor = {\n        advisor_id: 'ADV001',\n        name: 'Default Banking Advisor',\n        email: 'default@privatebank.com',\n        specialization: 'Private Banking',\n        years_experience: 5,\n        location: 'New York',\n        isDefault: true,\n        isFallback: true\n      };\n      console.log('‚ö†Ô∏è  Using hardcoded fallback advisor:', fallbackAdvisor);\n      setAdvisorData(fallbackAdvisor);\n      localStorage.setItem('advisor_data', JSON.stringify(fallbackAdvisor));\n      return fallbackAdvisor;\n    }\n  };\n\n  // Enhanced sign-in with Google OAuth to capture email\n  const signInWithGoogle = () => {\n    return new Promise((resolve, reject) => {\n      // COMPREHENSIVE EXCEPTION HANDLING: Multiple fallback layers\n      \n      try {\n        // Temporary demo bypass for OAuth domain issues\n        if (window.location.hostname.includes('run.app')) {\n          console.log('üîÑ Demo mode: Bypassing OAuth for Cloud Run deployment');\n          handleDemoAuthentication(resolve);\n          return;\n        }\n        \n        // Original Google OAuth implementation for local development\n        handleGoogleOAuth(resolve, reject);\n        \n      } catch (globalError) {\n        console.error('‚ùå CRITICAL: Global authentication error:', globalError);\n        handleFallbackAuthentication(resolve, 'Global error occurred');\n      }\n    });\n  };\n\n  // Demo authentication handler with fallbacks\n  const handleDemoAuthentication = (resolve) => {\n    try {\n      const demoUserEmail = 'sarah.johnson@privatebank.com';\n      const demoUser = {\n        email: demoUserEmail,\n        name: 'Sarah Johnson',\n        credential: 'demo_token_' + Date.now()\n      };\n      \n      localStorage.setItem('gcp_token', demoUser.credential);\n      localStorage.setItem('user_email', demoUser.email);\n      localStorage.setItem('user_name', demoUser.name);\n      \n      setToken(demoUser.credential);\n      setUser({\n        authenticated: true,\n        email: demoUser.email,\n        name: demoUser.name,\n        serviceAccount: false\n      });\n      \n      // Fetch real advisor data from database based on email\n      fetchAdvisorByEmail(demoUserEmail)\n        .then((advisor) => {\n          console.log('‚úÖ Demo authentication successful with advisor:', advisor?.name);\n          resolve({\n            email: demoUser.email,\n            name: demoUser.name,\n            advisor: advisor\n          });\n        })\n        .catch((error) => {\n          console.error('‚ö†Ô∏è  Demo advisor fetch failed, using fallback:', error);\n          handleFallbackAuthentication(resolve, 'Demo advisor fetch failed');\n        });\n        \n    } catch (demoError) {\n      console.error('‚ùå Demo authentication failed:', demoError);\n      handleFallbackAuthentication(resolve, 'Demo authentication failed');\n    }\n  };\n\n  // Google OAuth handler with comprehensive error handling\n  const handleGoogleOAuth = (resolve, reject) => {\n    try {\n      // Set a timeout to fallback if Google OAuth doesn't respond\n      const oauthTimeout = setTimeout(() => {\n        console.warn('‚è∞ Google OAuth timeout - falling back to default authentication');\n        handleFallbackAuthentication(resolve, 'OAuth timeout');\n      }, 10000); // 10 second timeout\n\n      if (!window.google) {\n        // Load Google Identity Services\n        const script = document.createElement('script');\n        script.src = 'https://accounts.google.com/gsi/client';\n        script.onload = () => {\n          clearTimeout(oauthTimeout);\n          initializeGoogleAuth(resolve, reject);\n        };\n        script.onerror = () => {\n          clearTimeout(oauthTimeout);\n          console.error('‚ùå Failed to load Google Identity Services script');\n          handleFallbackAuthentication(resolve, 'Google script load failed');\n        };\n        document.head.appendChild(script);\n      } else {\n        clearTimeout(oauthTimeout);\n        initializeGoogleAuth(resolve, reject);\n      }\n    } catch (oauthError) {\n      console.error('‚ùå Google OAuth setup error:', oauthError);\n      handleFallbackAuthentication(resolve, 'OAuth setup error');\n    }\n  };\n\n  // Initialize Google Auth with error handling\n  const initializeGoogleAuth = (resolve, reject) => {\n    try {\n      window.google.accounts.id.initialize({\n        client_id: '869426294559-2hqgspvo8nqm0h2c8rq1qfn7htvrkfnm.apps.googleusercontent.com',\n        callback: async (response) => {\n          try {\n            console.log('üîÑ Processing Google authentication response...');\n            \n            // Decode JWT to get user info\n            const payload = JSON.parse(atob(response.credential.split('.')[1]));\n            const userEmail = payload.email;\n            const userName = payload.name;\n\n            // Store user token and email\n            localStorage.setItem('gcp_token', response.credential);\n            localStorage.setItem('user_email', userEmail);\n            localStorage.setItem('user_name', userName);\n\n            setToken(response.credential);\n            setUser({\n              authenticated: true,\n              email: userEmail,\n              name: userName,\n              serviceAccount: false\n            });\n\n            // Fetch advisor data from BigQuery based on email\n            try {\n              const advisor = await fetchAdvisorByEmail(userEmail);\n              console.log('‚úÖ Google authentication successful with advisor:', advisor?.name);\n              \n              resolve({\n                email: userEmail,\n                name: userName,\n                advisor: advisor\n              });\n            } catch (advisorError) {\n              console.error('‚ö†Ô∏è  Advisor fetch failed after Google auth, using fallback:', advisorError);\n              // Still resolve with user data, advisor will be fallback\n              resolve({\n                email: userEmail,\n                name: userName,\n                advisor: null\n              });\n            }\n            \n          } catch (callbackError) {\n            console.error('‚ùå Error processing Google sign-in callback:', callbackError);\n            handleFallbackAuthentication(resolve, 'Google callback processing failed');\n          }\n        },\n        error_callback: (error) => {\n          console.error('‚ùå Google OAuth error callback:', error);\n          handleFallbackAuthentication(resolve, `Google OAuth error: ${error?.type || 'unknown'}`);\n        },\n        auto_select: false,\n      });\n\n      // Try to show the prompt, with fallback if it fails\n      try {\n        window.google.accounts.id.prompt((notification) => {\n          console.log('Google OAuth prompt notification:', notification);\n          \n          if (notification.isNotDisplayed() || notification.isSkippedMoment()) {\n            // Show the One Tap UI manually\n            try {\n              const buttonElement = document.getElementById('google-signin-button');\n              if (buttonElement) {\n                window.google.accounts.id.renderButton(buttonElement, {\n                  type: 'standard',\n                  size: 'large',\n                  text: 'signin_with',\n                  theme: 'outline',\n                  logo_alignment: 'left',\n                });\n                console.log('‚úÖ Google sign-in button rendered successfully');\n              } else {\n                console.warn('‚ö†Ô∏è  Google sign-in button element not found');\n              }\n            } catch (renderError) {\n              console.error('‚ùå Error rendering Google sign-in button:', renderError);\n            }\n          }\n        });\n      } catch (promptError) {\n        console.error('‚ùå Error showing Google OAuth prompt:', promptError);\n        handleFallbackAuthentication(resolve, 'Google prompt failed');\n      }\n      \n    } catch (initError) {\n      console.error('‚ùå Error initializing Google OAuth:', initError);\n      handleFallbackAuthentication(resolve, 'Google OAuth initialization failed');\n    }\n  };\n\n  // Ultimate fallback authentication - always succeeds\n  const handleFallbackAuthentication = async (resolve, reason) => {\n    console.log('üõ°Ô∏è  FALLBACK AUTHENTICATION ACTIVATED - Reason:', reason);\n    \n    try {\n      const fallbackUser = {\n        email: 'fallback@privatebank.com',\n        name: 'Default Banking Advisor',\n        credential: 'fallback_token_' + Date.now()\n      };\n      \n      localStorage.setItem('gcp_token', fallbackUser.credential);\n      localStorage.setItem('user_email', fallbackUser.email);\n      localStorage.setItem('user_name', fallbackUser.name);\n      \n      setToken(fallbackUser.credential);\n      setUser({\n        authenticated: true,\n        email: fallbackUser.email,\n        name: fallbackUser.name,\n        serviceAccount: false,\n        isFallback: true\n      });\n      \n      // **FIRST TRY: Fetch advisor ADV001 from database**\n      try {\n        console.log('üîÑ FALLBACK: Attempting to fetch advisor ADV001 from database...');\n        const apiUrl = process.env.REACT_APP_API_URL || 'https://apialchemistproject-backend-608187465720.us-central1.run.app';\n        \n        const response = await fetch(`${apiUrl}/advisor-by-id`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ advisor_id: \"ADV001\" })\n        });\n\n        if (response.ok) {\n          const result = await response.json();\n          if (result.advisor) {\n            console.log('‚úÖ FALLBACK SUCCESS: Using advisor ADV001 from database:', result.advisor);\n            setAdvisorData(result.advisor);\n            localStorage.setItem('advisor_data', JSON.stringify(result.advisor));\n            \n            resolve({\n              email: fallbackUser.email,\n              name: fallbackUser.name,\n              advisor: result.advisor,\n              isFallback: true,\n              fallbackReason: reason,\n              advisorSource: 'Database advisor ADV001'\n            });\n            return;\n          }\n        }\n        console.warn('‚ö†Ô∏è  Could not fetch advisor ID 1 from database, using hardcoded fallback');\n      } catch (dbError) {\n        console.warn('‚ö†Ô∏è  Database unavailable for advisor ID 1, using hardcoded fallback:', dbError);\n      }\n      \n      // **SECOND TRY: Use hardcoded fallback advisor only if database fails**\n      const fallbackAdvisor = {\n        advisor_id: 'ADV001',\n        name: 'Default Banking Advisor',\n        email: 'fallback@privatebank.com',\n        specialization: 'Private Banking',\n        years_experience: 5,\n        location: 'New York',\n        isDefault: true,\n        isFallback: true,\n        isHardcoded: true\n      };\n      \n      setAdvisorData(fallbackAdvisor);\n      localStorage.setItem('advisor_data', JSON.stringify(fallbackAdvisor));\n      \n      console.log('‚úÖ HARDCODED FALLBACK SUCCESSFUL:', fallbackAdvisor.name);\n      \n      resolve({\n        email: fallbackUser.email,\n        name: fallbackUser.name,\n        advisor: fallbackAdvisor,\n        isFallback: true,\n        fallbackReason: reason,\n        advisorSource: 'Hardcoded fallback'\n      });\n      \n    } catch (fallbackError) {\n      console.error('‚ùå CRITICAL: Even fallback authentication failed!', fallbackError);\n      // Last resort - minimal authentication\n      resolve({\n        email: 'emergency@privatebank.com',\n        name: 'Emergency User',\n        advisor: {\n          advisor_id: 'EMERGENCY',\n          name: 'Emergency Advisor',\n          email: 'emergency@privatebank.com',\n          isEmergency: true\n        },\n        isEmergency: true,\n        fallbackReason: 'All authentication methods failed',\n        advisorSource: 'Emergency mode'\n      });\n    }\n  };\n\n  // Manual sign-in for development/testing\n  const signInWithToken = (idToken) => {\n    localStorage.setItem('gcp_token', idToken);\n    setToken(idToken);\n    setUser({ authenticated: true, serviceAccount: false });\n  };\n\n  const signOut = () => {\n    localStorage.removeItem('gcp_token');\n    localStorage.removeItem('user_email');\n    localStorage.removeItem('user_name');\n    localStorage.removeItem('advisor_data');\n    setToken(null);\n    setUser(null);\n    setAdvisorData(null);\n  };\n\n  const getAuthHeaders = () => {\n    if (!token) return { 'Content-Type': 'application/json' };\n    \n    return {\n      'Authorization': `Bearer ${token}`,\n      'Content-Type': 'application/json'\n    };\n  };\n\n  // Initialize with saved data on load\n  useEffect(() => {\n    const savedAdvisor = localStorage.getItem('advisor_data');\n    const savedEmail = localStorage.getItem('user_email');\n    \n    if (savedAdvisor) {\n      setAdvisorData(JSON.parse(savedAdvisor));\n    } else if (savedEmail) {\n      // Re-fetch advisor data if we have email but no advisor data\n      fetchAdvisorByEmail(savedEmail);\n    }\n  }, [user]);\n\n  const value = {\n    user,\n    token,\n    loading,\n    advisorData,\n    signInWithToken,\n    signInWithGoogle,\n    signOut,\n    getAuthHeaders,\n    fetchAdvisorByEmail,\n    isAuthenticated: !!user\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}