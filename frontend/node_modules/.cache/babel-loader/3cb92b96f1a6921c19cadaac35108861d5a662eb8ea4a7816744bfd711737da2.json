{"ast":null,"code":"var _jsxFileName = \"/home/prakashb/Prakash/project_hackathon/frontend/src/contexts/TokenAuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState, useCallback } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [token, setToken] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [authError, setAuthError] = useState(null);\n  const [tokenValid, setTokenValid] = useState(false);\n\n  // Define validateToken first\n  const validateToken = async token => {\n    try {\n      // Test backend connectivity instead of validating Google token\n      const response = await fetch('https://apialchemistproject-backend-608187465720.us-central1.run.app/auth-check', {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (response.ok) {\n        const data = await response.json();\n        console.log('Backend connectivity test passed:', data);\n        return true;\n      } else {\n        console.log('Backend connectivity test failed:', response.status);\n        return false;\n      }\n    } catch (error) {\n      console.error('Backend connectivity error:', error);\n      return false;\n    }\n  };\n\n  // Define initializeAuth with proper dependencies\n  const initializeAuth = useCallback(async () => {\n    try {\n      setLoading(true);\n      setAuthError(null);\n\n      // First, check if we have a saved token\n      const savedToken = localStorage.getItem('gcp_identity_token');\n      if (savedToken) {\n        console.log('Found saved token, validating...');\n        const isValid = await validateToken(savedToken);\n        if (isValid) {\n          setToken(savedToken);\n          setUser({\n            authenticated: true,\n            email: localStorage.getItem('user_email') || 'demo-advisor@bankingcorp.com',\n            name: 'Banking Advisor'\n          });\n          setTokenValid(true);\n          setLoading(false);\n          return;\n        } else {\n          // Clear invalid token\n          localStorage.removeItem('gcp_identity_token');\n          localStorage.removeItem('user_email');\n        }\n      }\n\n      // No valid token found - user needs to authenticate\n      console.log('No valid token found, user needs to sign in');\n      setLoading(false);\n    } catch (error) {\n      console.error('Auth initialization failed:', error);\n      setAuthError('Authentication system initialization failed. Please refresh the page.');\n      setLoading(false);\n    }\n  }, []); // Empty dependency array since validateToken doesn't use state\n\n  // Now we can safely use initializeAuth in useEffect\n  useEffect(() => {\n    initializeAuth();\n  }, [initializeAuth]);\n\n  // Simplified sign-in function for demo authentication\n  const signIn = async () => {\n    try {\n      setLoading(true);\n      setAuthError(null);\n\n      // Simulate loading time for better UX\n      await new Promise(resolve => setTimeout(resolve, 1500));\n\n      // Create mock user and token for demo\n      const mockToken = 'demo-token-' + Date.now();\n      const mockUser = {\n        authenticated: true,\n        email: 'demo-advisor@bankingcorp.com',\n        name: 'Banking Advisor'\n      };\n\n      // Save to localStorage\n      localStorage.setItem('gcp_identity_token', mockToken);\n      localStorage.setItem('user_email', mockUser.email);\n\n      // Update state\n      setToken(mockToken);\n      setUser(mockUser);\n      setTokenValid(true);\n      console.log('Demo authentication successful');\n    } catch (error) {\n      console.error('Sign in error:', error);\n      setAuthError('Sign in failed. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const signOut = () => {\n    setUser(null);\n    setToken(null);\n    setTokenValid(false);\n    setAuthError(null);\n\n    // Clear localStorage\n    localStorage.removeItem('gcp_identity_token');\n    localStorage.removeItem('user_email');\n    console.log('User signed out successfully');\n  };\n  const value = {\n    user,\n    token,\n    loading,\n    authError,\n    tokenValid,\n    signIn,\n    signOut\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 148,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"z7SLxM6cwT39VJ4GMw+L/qsaIVU=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","useCallback","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","token","setToken","loading","setLoading","authError","setAuthError","tokenValid","setTokenValid","validateToken","response","fetch","method","headers","ok","data","json","console","log","status","error","initializeAuth","savedToken","localStorage","getItem","isValid","authenticated","email","name","removeItem","signIn","Promise","resolve","setTimeout","mockToken","Date","now","mockUser","setItem","signOut","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/prakashb/Prakash/project_hackathon/frontend/src/contexts/TokenAuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState, useCallback } from 'react';\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [token, setToken] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [authError, setAuthError] = useState(null);\n  const [tokenValid, setTokenValid] = useState(false);\n\n  // Define validateToken first\n  const validateToken = async (token) => {\n    try {\n      // Test backend connectivity instead of validating Google token\n      const response = await fetch('https://apialchemistproject-backend-608187465720.us-central1.run.app/auth-check', {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json',\n        },\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        console.log('Backend connectivity test passed:', data);\n        return true;\n      } else {\n        console.log('Backend connectivity test failed:', response.status);\n        return false;\n      }\n    } catch (error) {\n      console.error('Backend connectivity error:', error);\n      return false;\n    }\n  };\n\n  // Define initializeAuth with proper dependencies\n  const initializeAuth = useCallback(async () => {\n    try {\n      setLoading(true);\n      setAuthError(null);\n\n      // First, check if we have a saved token\n      const savedToken = localStorage.getItem('gcp_identity_token');\n      if (savedToken) {\n        console.log('Found saved token, validating...');\n        const isValid = await validateToken(savedToken);\n        if (isValid) {\n          setToken(savedToken);\n          setUser({ \n            authenticated: true, \n            email: localStorage.getItem('user_email') || 'demo-advisor@bankingcorp.com',\n            name: 'Banking Advisor'\n          });\n          setTokenValid(true);\n          setLoading(false);\n          return;\n        } else {\n          // Clear invalid token\n          localStorage.removeItem('gcp_identity_token');\n          localStorage.removeItem('user_email');\n        }\n      }\n\n      // No valid token found - user needs to authenticate\n      console.log('No valid token found, user needs to sign in');\n      setLoading(false);\n    } catch (error) {\n      console.error('Auth initialization failed:', error);\n      setAuthError('Authentication system initialization failed. Please refresh the page.');\n      setLoading(false);\n    }\n  }, []); // Empty dependency array since validateToken doesn't use state\n\n  // Now we can safely use initializeAuth in useEffect\n  useEffect(() => {\n    initializeAuth();\n  }, [initializeAuth]);\n\n  // Simplified sign-in function for demo authentication\n  const signIn = async () => {\n    try {\n      setLoading(true);\n      setAuthError(null);\n      \n      // Simulate loading time for better UX\n      await new Promise(resolve => setTimeout(resolve, 1500));\n      \n      // Create mock user and token for demo\n      const mockToken = 'demo-token-' + Date.now();\n      const mockUser = {\n        authenticated: true,\n        email: 'demo-advisor@bankingcorp.com',\n        name: 'Banking Advisor'\n      };\n      \n      // Save to localStorage\n      localStorage.setItem('gcp_identity_token', mockToken);\n      localStorage.setItem('user_email', mockUser.email);\n      \n      // Update state\n      setToken(mockToken);\n      setUser(mockUser);\n      setTokenValid(true);\n      \n      console.log('Demo authentication successful');\n    } catch (error) {\n      console.error('Sign in error:', error);\n      setAuthError('Sign in failed. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const signOut = () => {\n    setUser(null);\n    setToken(null);\n    setTokenValid(false);\n    setAuthError(null);\n    \n    // Clear localStorage\n    localStorage.removeItem('gcp_identity_token');\n    localStorage.removeItem('user_email');\n    \n    console.log('User signed out successfully');\n  };\n\n  const value = {\n    user,\n    token,\n    loading,\n    authError,\n    tokenValid,\n    signIn,\n    signOut\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}